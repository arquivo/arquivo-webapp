/* JavaCC grammar for TREC .GOV collection
 * Based on sample doc 
 * http://ir.dcs.gla.ac.uk/test_collections/samples/GOV_sampleDoc 
 */

options {
	STATIC = false;
	UNICODE_INPUT = true;
	
}

PARSER_BEGIN(TRECParser)
package org.archive.nutch.trec;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.io.MD5Hash;
import org.apache.nutch.metadata.Metadata;
import org.apache.nutch.parse.Parse;
import org.apache.nutch.parse.ParseStatus;
import org.apache.nutch.parse.ParseUtil;
import org.apache.nutch.parse.ParseImpl;
import org.apache.nutch.protocol.Content;
import org.apache.nutch.crawl.CrawlDatum;
import org.apache.nutch.util.mime.MimeType;
import org.apache.nutch.util.mime.MimeTypeException;
import org.apache.nutch.fetcher.FetcherOutput;
import org.apache.nutch.fetcher.FetcherOutputFormat;
import org.apache.nutch.fetcher.Fetcher;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Date;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.Locale;
import java.util.TimeZone;
import java.util.HashMap;
import java.util.Map;
import java.lang.StringBuilder;


public class TRECParser {
	private static boolean indexAll;
	private static  final String WHITESPACE = "\\s+";
	public static final String CONTENT_TYPE_KEY = "content-type";
	public static final String DATE_KEY = "date";
	public static final String TEXT_TYPE = "text/";
	public static final String APPLICATION_TYPE = "application/";
	public static final String DOCNO_KEY = "DOCNO";
    /* Date formats from apache-httpclient */
    public static final String PATTERN_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
    public static final String PATTERN_RFC1036 = "EEEE, dd-MMM-yy HH:mm:ss zzz";
    public static final String PATTERN_ASCTIME = "EEE MMM d HH:mm:ss yyyy";
    private static final Collection DATE_PATTERNS = Arrays.asList(
            new String[] { PATTERN_ASCTIME, PATTERN_RFC1036, PATTERN_RFC1123 } );
    public final Log LOG = LogFactory.getLog(TRECParser.class);


	public void main(String args[]) throws ParseException,
	IOException {
	}
	
	protected boolean skip(final String mimetype) {
		boolean decision = false;
		// Are we to index all content?
		if (!indexAll) {
			if ((mimetype == null) || 
			(!mimetype.startsWith(TEXT_TYPE) &&
			!mimetype.startsWith(APPLICATION_TYPE))) {
				// Skip any but basic types.
				decision = true;
			}
		}
		return decision;
	}
    public static Date parseDate(
        String dateValue) throws ParseException {

        if (dateValue.length() > 1 
            && dateValue.startsWith("'") 
            && dateValue.endsWith("'")
        ) {
            dateValue = dateValue.substring (1, dateValue.length() - 1);
        }
        
        SimpleDateFormat dateParser = null;        
        Iterator formatIter = DATE_PATTERNS.iterator();
        
        while (formatIter.hasNext()) {
            String format = (String) formatIter.next();            
            if (dateParser == null) {
                dateParser = new SimpleDateFormat(format, Locale.US);
                dateParser.setTimeZone(TimeZone.getTimeZone("GMT"));
            } else { 
                dateParser.applyPattern(format);                    
            }
			try {
				return dateParser.parse(dateValue);
			} catch (java.text.ParseException pe) {
				// ignore this exception, we will try the next format
			}
        }
        throw new ParseException("Unable to parse the date " + dateValue);
    }


}

class TRECDoc {
	public String docNumber = "";
	public String urlString  = "";
	public String responseCode = "";
	public Integer bodyLength = null;
    Map<String, String> headers = new HashMap<String, String>();
}

PARSER_END(TRECParser)

<DEFAULT> TOKEN : {<DOC_BEGIN:		"<DOC>"    >		}
<DEFAULT> TOKEN : {<DOCNO_BEGIN:	"<DOCNO>"  >		}
<DEFAULT> TOKEN : {<DOCNO_END:		"</DOCNO>" >		}
<DEFAULT> TOKEN : {<OLDDOCNO_BEGIN:	"<DOCOLDNO>"  >		}
<DEFAULT> TOKEN : {<OLDDOCNO_END:	"</DOCOLDNO>" >		}
<DEFAULT> TOKEN : {<DOCNO:		(["A"-"Z","0"-"9","-"])+
						   				>				}
<DEFAULT> TOKEN : {<DOCHDR_BEGIN:	"<DOCHDR>\n"
										>: DOCHDR		}


<DOCHDR>  TOKEN : {<URL_BGN:		"http://"
										>: URLBDY		}

<DOCTXT>  TOKEN : {<HEADER_LABEL:	((["A"-"Z","a"-"z","-","0"-"9"])+
					 ": ")	 >							}
<DOCTXT>  TOKEN : {<HEADER_CONTENT:	~["\n","\r"]>}
<DOCTXT>  TOKEN : {<HEADER_END:		(["\n","\r"]){1,2}>	}
<DOCTXT>  TOKEN : {<DOCHDR_END:		"</DOCHDR>"
										>: DOCBODY		}

<HTTPBDY> TOKEN : {<CODE:		(["0"-"9"]){3}>			}
<HTTPBDY> TOKEN : {<MSGU:		(~["\n","\r","0"-"9"])+>}
<HTTPBDY> TOKEN : {<HEND:		(["\n","\r"," "]){1,3}
										>: DOCTXT		}
<URLBDY>  TOKEN : {<URLTXT:		(["A"-"Z","a"-"z","0"-"9",
	 				 			  "$","-","_",".","+","!",
					 			  "(",")",";",",","/","?","\'",
					 			":","@","=","&","~","%","*"])+>	}
<URLBDY>  TOKEN : {<UMSGBGN:		" " >: URLMSG 		}
<URLBDY>  TOKEN : {<URLEND:		(["\n","\r"]){1,2}
							    "HTTP/" ["0"-"9"] "."
								["0"-"9"] " "
						   				>: HTTPBDY		}
<URLMSG>  TOKEN : {<UMSGBODY:    ~[]   >         		}
<URLMSG>  TOKEN : {<UMSGEND:	(["\n","\r"]){1,2}
							    "HTTP/" ["0"-"9"] "."
								["0"-"9"] " "
						   				>: HTTPBDY		}

<DOCBODY> TOKEN : {<DOC_END:		"</DOC>"
										>: DEFAULT		}
<DOCBODY> TOKEN : {<BODY:		~[]		>				}

void Input(ParseUtil pu, OutputCollector output, Configuration conF,
		 String segmentName) 
	throws IOException:
{ 
	Token docNumber = null;
	TRECDoc d = new TRECDoc();
	String docBody = "", mimetype = null;
	Metadata metaData = new Metadata();
	Date fetchDate = null;
}
{
  (
    (
    try {	<DOC_BEGIN> 
	("\n"|"\r"|"\r\n"|" ")*
	(<DOCNO_BEGIN> docNumber = <DOCNO> <DOCNO_END> ("\n"|"\r"|"\r\n"|" ")* |
	 <OLDDOCNO_BEGIN> <DOCNO> <OLDDOCNO_END>("\n"|"\r"|"\r\n"|" ")*) +
	<DOCHDR_BEGIN> docHdrBody(d) <DOCHDR_END>
	docBody = body()
	(<DOC_END>|<EOF>)
	("\n"|"\r"|"\r\n"|" ")*
   } catch (Exception e) {
  	    LOG.error(e.toString());
    	Token t;
    	do {
      		t = getNextToken();
    	} while (t.kind != DOC_END && t.kind != EOF);
        if (t.kind != EOF) {
            // Eat up DOC_END.
    	    t = getNextToken();
        }
        // If error, skip this doc. completely.
        return;
   }
	{
		d.docNumber = docNumber.image;
		d.bodyLength = new Integer(docBody.length());
		LOG.info("Importing DocNo: " + d.docNumber +
				", : " + d.urlString);
        //Go through headers
            for (Iterator it=d.headers.entrySet().iterator();
                 it.hasNext(); ) {
            	Map.Entry me = (Map.Entry)it.next();
                String key = (String)me.getKey();
                String value = (String)me.getValue();
                //Find a mimetype
                if (key.toLowerCase().equals(
                     CONTENT_TYPE_KEY)) {
                   // Is it valid
                   try {
                      mimetype = value.toLowerCase().
                      		replaceAll(WHITESPACE,"-");
                      if (mimetype == null) {
                         mimetype = "no-type";
                      }
                      new MimeType(value.toLowerCase());
                   } catch (MimeTypeException e) {
                         mimetype = "no-type";
                   }
                   if (skip(mimetype)) { //XXX
                   }
                }
                // Parse a fetch date from the http headers
                if (key.toLowerCase().equals(DATE_KEY)) {
                   try {
                      fetchDate = parseDate(value);
                   } catch (ParseException e) {
                      // Need to log this
                      // Parse exception, default date will be inserted later
                      LOG.error("Date Exception " + e.getMessage());
                   }
                }
                //Add the rest of headers to the metadata
                metaData.set(key, value);
            }

		//Set metadata document number
		metaData.set(DOCNO_KEY,d.docNumber);
		//Set mimetype
		metaData.set(CONTENT_TYPE_KEY, mimetype);
		//Set length
		metaData.set("contentLength", d.bodyLength.toString());
		//Set Segment Name
		metaData.set(Fetcher.SEGMENT_NAME_KEY, segmentName);
		//Set md5
		metaData.set(Fetcher.SIGNATURE_KEY, MD5Hash.digest(docBody.getBytes())
                .toString());
		//If we didn't get a date Just use a random one.
		if (fetchDate == null) {
			fetchDate = new Date(
				Long.decode("1151693552").longValue());
		}
		//start timer
		long startTime = System.currentTimeMillis();
		//Make a content object
		Content content = new Content(d.urlString,
			d.urlString, docBody.getBytes(), mimetype, metaData, conF);
        Parse parse = null;
        ParseStatus parseStatus;
        try {
            parse = pu.parse(content);
            parseStatus = parse.getData().getStatus();
        } catch (final Exception e) {
            parseStatus = new ParseStatus(e);
            LOG.error("error: unknown"+parseStatus.toString());
            if(!parseStatus.isSuccess()) {
            	LOG.error("parse failure");
            }
        }
        if(parseStatus.isSuccess()) {
            CrawlDatum datum = new CrawlDatum();
            datum.setStatus(CrawlDatum.STATUS_FETCH_SUCCESS);
            datum.setFetchTime(fetchDate.getTime());
            WritableComparable outkey = new UTF8(d.urlString);
            Writable outvalue = 
                new FetcherOutput(datum, null, new ParseImpl(parse));
            output.collect(outkey, outvalue);
        }
		d = new TRECDoc();
		metaData = new Metadata();
	}
    )* {/* close files/parsers here*/}
  )
  <EOF>
}

String body():
{ 
	Token bd = null;
    StringBuilder buffer = new StringBuilder(16000);
}
{
    ( bd = <BODY>
        { buffer.append(bd.image); }
    )*
    { return(buffer.toString()); }
} 



void docHdrBody(TRECDoc d):
{
	Token hd = null;
}
{
	url(d)
	httpResponse(d)
	(header(d))+
}

void header(TRECDoc d):
{
	Token la = null, ct = null;
	StringBuilder buffer = new StringBuilder();
}
{
  try {
	(la = <HEADER_LABEL>)
	(ct = <HEADER_CONTENT>
		{ buffer.append(ct.image); })*
	<HEADER_END>
	{ d.headers.put(la.image.substring(0,la.image.length()-2), buffer.toString()); }
  } catch (ParseException e) {
  	    LOG.error(e.toString());
    	Token t;
    	do {
      		t = getNextToken();
    	} while (t.kind != DOC_END && t.kind != EOF);
  }
}

void url(TRECDoc d):
{
	Token ur=null,b1=null;
}
{
	b1=<URL_BGN>
	ur=<URLTXT>
	(<URLEND>|(<UMSGBGN>(<UMSGBODY>)*<UMSGEND>))
	{
		d.urlString = b1.image + ur.image;
	}
}

void httpResponse(TRECDoc d):
{
	Token code=null,b1=null,b2=null,b3=null;
}
{	
	code = <CODE>
	(b2=<MSGU>)*
	b3=<HEND>
	{
		d.responseCode = code.image;
	}
}
