<?xml version="1.0" encoding="ISO-8859-1"?>

<document>
  <properties>
    <title>Home Page</title>
    <author email="stack at archive dot org">St.Ack</author>
    <revision>$Id: index.xml 1450 2007-01-22 21:15:40Z stack-sf $</revision>
  </properties>

  <body>
    <section name="Nutch TREC tools">
	<p>This project contains extensions to <a href="http://lucene.apache.org/nutch/">nutch</a> to allow indexing of collections used in the <a href="http://trec.nist.gov">TREC conference</a> (primarily focusing on the <a href="http://ir.dcs.gla.ac.uk/test_collections/gov2-summary.htm">.GOV2 collection</a> and <a href="http://www-nlpir.nist.gov/projects/terabyte/">Terabyte track</a>) and searching of those collections in a format compatible with <a href="http://trec.nist.gov/trec_eval/">trec_eval</a> and <a href="http://trec.nist.gov/data/terabyte/05/nphp-eval.pl">others</a>.</p>
    </section>

    <section name="Building">
      <p>To build you need a JDK, ant and the <a href="http://lucene.apache.org/nutch/version_control.html">nutch sources</a>. The ant buildfile
assumes the nutch sources are in the subdirectory <code>nutch/</code>. So if
you have a checkout of the nutch subversion repository:
<pre>
	$ cd ${ARCHIVE_ACCESS}/projects/nutch-trec
	$ ln -s ${NUTCH_SVN}/trunk nutch
	$ ant</pre>
      </p>

     <p>The parser for the TREC format is generated from a
     <a href="https://javacc.dev.java.net/">JavaCC</a> grammar.
     If you wish to rebuild the JavaCC generated sources from the .jj javacc
     file you need a copy of JavaCC in JavaCC/, eg:
      <pre>
	$ cd ${ARCHIVE_ACCESS}/projects/nutch-trec
	$ ln -s ${JAVACC_HOME} JavaCC
	$ ant javacc</pre>
     </p>
     <p>The default ant build target (jar) will build a nutch-trec.jar
     in the <code>build/</code> subdirectory.  As part of the build, 
     a symlink will also be added under ${NUTCH_HOME}/build to the
     generated nutch-trec.jar -- named nutch-trec.job -- 
     so we can get TREC querying classes onto the nutch CLASSPATH.</p>
    </section>

    <section name="Indexing">
     <p>To index a collection you need to patch the <code>bin/nutch</code>
     script to accept <a href="http://lucene.apache.org/hadoop/">Hadoop</a>
     job jars (see:<a href="https://issues.apache.org/jira/browse/NUTCH-352">https://issues.apache.org/jira/browse/NUTCH-352</a>).
     If you wish to run with a distributed hadoop configuration you'll have to
     change the config files appropriately. 
     To index in standalone mode: 
      <pre>
	$ ${NUTCH_HOME}/bin/nutch jar ${NUTCH-TREC_HOME}/build/nutch-trec.jar \
	  /input/directory /output/directory</pre>
      Where <code>/input/directory</code> is an existing directory containing
      text files with the locations of collection files to be indexed (one
      location per line). The referenced collection files can be local
      (<code>/path/to/file.gz</code>) or remote over http
      (<code>http://domain.com/path/to/file.gz</code>), uncompressed or
      gzipped (denoted by a <code>.gz</code> suffix).  The collection files
      are assumed to be in the 
      <a href="http://ir.dcs.gla.ac.uk/test_collections/samples/GOV_sampleDoc">general format used in .GOV(2)</a>.</p>

      <p>The above step results in at least one
      <code>/output/directory/segments/timestamp/</code> being created. Nutch
      itself is then used to build an index:
       <pre>
	$ ${NUTCH_HOME}/bin/nutch updatedb /output/directory/crawldb \
	  /output/directory/segments/timestamp
	$ ${NUTCH_HOME}/bin/nutch invertlinks /output/directory/linkdb \
	  /output/directory/segments/timestamp
	$ ${NUTCH_HOME}/bin/nutch index /output/directory/indexes \
	  /output/directory/crawldb /output/directory/linkdb \
	  /output/directory/segments/timestamp</pre>
      </p>
      <p>In our experience, indexing the gov2 collection took a few days on
      a rack of 20-odd dual-core 2Ghz Athlon machines.
      Also, the parser, as of 09/2006, fails on some of the gov2
      collection documents -- to be fixed -- and the gov2 redirects are not
      yet considered.
      </p>
     </section>
     <section name="Querying">
      <p>To test querying the index, pass the file
      <a href="http://trec.nist.gov/data/terabyte/05/05.efficiency_topics.gz">http://trec.nist.gov/data/terabyte/05/05.efficiency_topics.gz</a> decompressed
      to the TRECBean (subclass of NutchBean).  This file has
      50k lines of queries in the format <code>queryid:query</code>.
      Pass the file as follows: 
       <pre>
	$ ln -s /output/directory crawl
	$ ${NUTCH_HOME}/bin/nutch org.archive.nutch.trec.TRECBean \
	  query.txt runid limit
       </pre>
       ...where runid is a string describing the run, limit is the maximum
    number of documents to return (defaults to 20), and TRECBean is a subclass
    of NutchBean, added to the nutch CLASSPATH by symlinking nutch-trec.jar
    as nutch-trec.job under $NUTCH_HOME/build (See tail of <i>Building</i>
    section above).  Each line will be run serially.  Its slow since we
    startup nutch everytime but is good to confirm system is basically
    working.</p>
    <p>TODO: Relevancy and efficency tests (The 'np' items from here:
    <a href="http://trec.nist.gov/data/terabyte/05/">terabyte 05</a>.</p>
     </section>
     <section name="Misc">
      <p>If you wish to use this project in Eclipse, do an ant build import
from the ant build.xml and make sure your compiler compliance level is
set to 5.0. 
      </p>
      <p>To run the JUnit test from ant you need to have the junit.jar added
to your <code>${ANT_HOME}/lib</code> as outlined in <a href="http://ant.apache.org/manual/OptionalTasks/junit.html">http://ant.apache.org/manual/OptionalTasks/junit.html</a></p>
     </section>
   </body>
</document>
